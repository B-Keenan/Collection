---
- name: TMOS upgrade for an LTM active standby HA pair
  hosts: bigips_test
  gather_facts: False
  vars:

    provider:
      password: "{{ ansible_ssh_pass }}"
      server: "{{ ansible_host }}"
      user: "sd-0482"
      validate_certs: False

  tasks:

    # Pre-checks
    # Obtain vs, pool and node count, and their status.

    - name: Get failover state
      command: cat /var/prompt/ps1
      register: failover_state
    
    - block:
      - name: Save running configuration
        bigip_config:
          save: yes
          provider: "{{ provider }}"
        delegate_to: localhost
      
      # Comment out this task if no connectivity to callhome or activate.f5.com.
      # Create variable to determine whether or not to reactivate license.
      # Use list of shell commands to actually reactivate the license.
      - name: Reactivate License
        shell: SOAPLicenseClient --basekey $(perl -ane 'print $F[3] if /^Registration Key/' /config/bigip.license)
      
      - name: Wait for configuration to finish loading
        wait_for:
          timeout: 120
        delegate_to: localhost
      
      - name: Register device-groups with pending changes
        shell: tmsh show cm sync-status | grep 'to group' | awk '{print $8}'
        register: device_group

      - name: Synchronize pending changes
        command: tmsh run cm config-sync to-group "{{ item }}"
        loop: "{{ device_group.stdout_lines }}"
        loop_control:
          pause: 10
        
      - name: Wait for final sync
        wait_for:
          timeout: 10
        delegate_to: localhost
      
      - name: Get current time on BIG-IP
        command: date "+%F"
        register: date
      
      - name: Download a new UCS
        bigip_ucs_fetch:
          async_timeout: 600
          src: "{{ inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          dest: "{{ '/backups/' + inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Upload upgrade image
        bigip_software_image:
          image: "{{ '/images/' + upgrade_iso }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for image to become available
        wait_for:
          timeout: 30
        delegate_to: localhost
      
      - name: Get available volume number to use
        script: /scripts/get_vol_number.bash
        register: vol
      
      - name: Install BIG-IP software
        bigip_software_install:
          image: "{{ upgrade_iso }}"
          state: activated
          volume: "{{ vol.stdout }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for device to return to standby
        bigip_command:
          provider: "{{ provider }}"
          warn: no
          commands:
            - bash -c "cat /var/prompt/ps1"
          wait_for:
            - result[0] contains Standby
          retries: 20
          interval: 30
        register: result
        delegate_to: localhost

      when: failover_state.stdout  == 'Standby'


    - name: Failover so we're running on the new software
      command: tmsh run sys failover standby
      when: failover_state.stdout  == 'Active'
    
    - name: Update failover state variable to upgrade next standby
      command: cat /var/prompt/ps1
      register: failover_state

    - block:
      - name: Save running configuration
        bigip_config:
          save: yes
          provider: "{{ provider }}"
        delegate_to: localhost
      
      # Comment out this task if no connectivity to callhome or activate.f5.com.
      - name: Reactivate License
        shell: SOAPLicenseClient --basekey $(perl -ane 'print $F[3] if /^Registration Key/' /config/bigip.license)
      
      - name: Wait for configuration to finish loading
        wait_for:
          timeout: 120
        delegate_to: localhost
      
      - name: Get current time on BIG-IP
        command: date "+%F"
        register: date
      
      - name: Download a new UCS
        bigip_ucs_fetch:
          async_timeout: 600
          src: "{{ inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          dest: "{{ '/backups/' + inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Upload upgrade image
        bigip_software_image:
          image: "{{ '/images/' + upgrade_iso }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for image to become available
        wait_for:
          timeout: 30
        delegate_to: localhost
      
      - name: Get available volume number to use
        script: /scripts/get_vol_number.bash
        register: vol
      
      - name: Install BIG-IP software
        bigip_software_install:
          image: "{{ upgrade_iso }}"
          state: activated
          volume: "{{ vol.stdout }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for device to return to standby
        bigip_command:
          provider: "{{ provider }}"
          warn: no
          commands:
            - bash -c "cat /var/prompt/ps1"
          wait_for:
            - result[0] contains Standby
          retries: 20
          interval: 30
        register: result
        delegate_to: localhost
      
      - name: Register device-groups with pending changes
        shell: tmsh show cm sync-status | grep 'to group' | awk '{print $8}'
        register: device_group

      - name: Synchronize pending changes
        command: tmsh run cm config-sync to-group "{{ item }}"
        loop: "{{ device_group.stdout_lines }}"
        loop_control:
          pause: 10
      
      - name: Wait for final sync
        wait_for:
          timeout: 20
        delegate_to: localhost
      
      # Post checks
      
      when: failover_state.stdout  == 'Standby'


    - name: Failover to resume original HA state
      command: tmsh run sys failover standby
      when: failover_state.stdout  == 'Active'
    
    # Take backups
...