---
- name: F5 BIG-IP Upgrade LTM HA Active Standby Pair
  hosts: bigip_lab
  gather_facts: False
  any_errors_fatal: true
  vars:

    provider:
      password: "{{ ansible_ssh_pass }}"
      server: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      validate_certs: False

  tasks:

    - name: Register failover state
      command: cat /var/prompt/ps1
      register: failover_state

    - name: Register current boot volume name
      shell: tmsh show sys software version | grep -v no | awk '/.D[1-9]/{print $1}'
      register: cur_vol
    
    - block:
      - name: Save running configuration
        bigip_config:
          save: yes
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Register Partitions
        shell: tmsh list auth partition | grep partition | awk '{print $3}'
        register: partitions

      - name: Get Config Facts
        bigip_device_info:
          partition: "{{ item }}"
          gather_subset:
            - virtual-servers
            - ltm-pools
            - self-ips
            - vlans
          provider: "{{ provider }}"
        loop: "{{ partitions.stdout_lines }}"
        register: f5_info
        delegate_to: localhost

      - name: Pre-Upgrade Parse
        set_fact:
          startvirtstats: "{{ f5_info.results | map(attribute='virtual_servers') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          startpoolstats: "{{ f5_info.results | map(attribute='ltm_pools') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          startselfstats: "{{ f5_info.results | map(attribute='self_ips') | flatten
            | items2dict(key_name='full_path', value_name='vlan') }}"
          startvlanstats: "{{ f5_info.results | map(attribute='vlans') | flatten
            | items2dict(key_name='full_path', key_name='tag') }}"
      
      # Comment out this task if no connectivity to callhome or activate.f5.com.
      - name: Reactivate License
        shell: SOAPLicenseClient --basekey $(perl -ane 'print $F[3] if /^Registration Key/' /config/bigip.license)
      
      - name: Wait for configuration to finish loading
        wait_for:
          timeout: 120
        delegate_to: localhost
      
      - name: Register device-groups with pending changes
        shell: tmsh show cm sync-status | grep 'to group' | awk '{print $8}'
        register: device_group

      - name: Synchronize pending changes
        command: tmsh run cm config-sync to-group "{{ item }}"
        loop: "{{ device_group.stdout_lines }}"
        loop_control:
          pause: 10
        
      - name: Wait for final sync
        wait_for:
          timeout: 20
        delegate_to: localhost
      
      - name: Get current time on BIG-IP
        command: date "+%F"
        register: date
      
      - name: Download a new UCS
        bigip_ucs_fetch:
          async_timeout: 600
          src: "{{ inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          dest: "{{ '/backups/' + inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Upload upgrade image
        bigip_software_image:
          image: "{{ '/images/' + upgrade_iso }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for image to become available
        wait_for:
          timeout: 30
        delegate_to: localhost
      
      - name: Get available volume number to use
        script: /scripts/get_vol_number.bash
        register: vol
      
      - name: Install BIG-IP software
        bigip_software_install:
          image: "{{ upgrade_iso }}"
          state: activated
          volume: "{{ vol.stdout }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for device to return to standby
        bigip_command:
          provider: "{{ provider }}"
          warn: no
          commands:
            - bash -c "cat /var/prompt/ps1"
          wait_for:
            - result[0] contains Standby
          retries: 20
          interval: 30
        register: result
        delegate_to: localhost

      - name: Post-Upgrade Parse
        set_fact:
          endvirtstats: "{{ f5_info.results | map(attribute='virtual_servers') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          endpoolstats: "{{ f5_info.results | map(attribute='ltm_pools') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          endselfstats: "{{ f5_info.results | map(attribute='self_ips') | flatten
            | items2dict(key_name='full_path', value_name='vlan') }}"
          endvlanstats: "{{ f5_info.results | map(attribute='vlans') | flatten
            | items2dict(key_name='full_path', value_name='tag') }}"
      
      - name: Check Virtual Servers
        assert:
          that:
            - item.value == endvirtstats[item.key]
          fail_msg: "Virtual server '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endvirtstats[item.key] }}'"
          success_msg: "{{ item.key }} state unchanged"
          quiet: yes
        loop: "{{ startvirtstats|dict2items }}"
        loop_control:
          label: "{{ item.key }}"

      - name: Check Pools
        assert:
          that:
            - item.value == endpoolstats[item.key]
          fail_msg: "Pool '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endpoolstats[item.key] }}'"
          success_msg: "{{ item.key }} state unchanged"
          quiet: yes
        loop: "{{ startpoolstats|dict2items }}"
        loop_control:
          label: "{{ item.key }}"

      - name: Check Self-IPs
        assert:
          that:
            - item.value == endselfstats[item.key]
          fail_msg: "Self IP '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endselfstats[item.key] }}'"
          success_msg: "{{ item.key }} state unchanged"
          quiet: yes
        loop: "{{ startselfstats|dict2items }}"
        loop_control:
          label: "{{ item.key }}"

      - name: Check VLANs
        assert:
          that:
            - item.value == endvlanstats[item.key]
          fail_msg: "VLAN '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endselfstats[item.key] }}'"
          success_msg: "{{ item.key }} state unchanged"
          quiet: yes
        loop: "{{ startvlanstats|dict2items }}"
        loop_control:
          label: "{{ item.key }}"

      when: "'Standby' in failover_state.stdout"


    - name: Failover so we're running on the new software
      command: tmsh run sys failover standby
      when: "'Active' in failover_state.stdout"
      
    - name: Update failover state variable to upgrade next standby
      command: cat /var/prompt/ps1
      register: failover_state

    - block:
      - name: Save running configuration
        bigip_config:
          save: yes
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Get Config Facts
        bigip_device_info:
          partition: "{{ item }}"
          gather_subset:
            - virtual-servers
            - ltm-pools
            - self-ips
            - vlans
          provider: "{{ provider }}"
        loop: "{{ partitions.stdout_lines }}"
        register: f5_info
        delegate_to: localhost

      - name: Pre-Upgrade Parse
        set_fact:
          startvirtstats: "{{ f5_info.results | map(attribute='virtual_servers') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          startpoolstats: "{{ f5_info.results | map(attribute='ltm_pools') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          startselfstats: "{{ f5_info.results | map(attribute='self_ips') | flatten
            | items2dict(key_name='full_path', value_name='vlan') }}"
          startvlanstats: "{{ f5_info.results | map(attribute='vlans') | flatten
            | items2dict(key_name='full_path', key_name='tag') }}"
      
      # Comment out this task if no connectivity to callhome or activate.f5.com.
      - name: Reactivate License
        shell: SOAPLicenseClient --basekey $(perl -ane 'print $F[3] if /^Registration Key/' /config/bigip.license)
      
      - name: Wait for configuration to finish loading
        wait_for:
          timeout: 120
        delegate_to: localhost
      
      - name: Get current time on BIG-IP
        command: date "+%F"
        register: date
      
      - name: Download a new UCS
        bigip_ucs_fetch:
          async_timeout: 600
          src: "{{ inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          dest: "{{ '/backups/' + inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Upload upgrade image
        bigip_software_image:
          image: "{{ '/images/' + upgrade_iso }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for image to become available
        wait_for:
          timeout: 30
        delegate_to: localhost
      
      - name: Get available volume number to use
        script: /scripts/get_vol_number.bash
        register: vol
      
      - name: Install BIG-IP software
        bigip_software_install:
          image: "{{ upgrade_iso }}"
          state: activated
          volume: "{{ vol.stdout }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for device to return to standby
        bigip_command:
          provider: "{{ provider }}"
          warn: no
          commands:
            - bash -c "cat /var/prompt/ps1"
          wait_for:
            - result[0] contains Standby
          retries: 20
          interval: 30
        register: result
        delegate_to: localhost
      
      - name: Post-Upgrade Parse
        set_fact:
          endvirtstats: "{{ f5_info.results | map(attribute='virtual_servers') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          endpoolstats: "{{ f5_info.results | map(attribute='ltm_pools') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          endselfstats: "{{ f5_info.results | map(attribute='self_ips') | flatten
            | items2dict(key_name='full_path', value_name='vlan') }}"
          endvlanstats: "{{ f5_info.results | map(attribute='vlans') | flatten
            | items2dict(key_name='full_path', value_name='tag') }}"
      
      - name: Check Virtual Servers
        assert:
          that:
            - item.value == endvirtstats[item.key]
          fail_msg: "Virtual server '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endvirtstats[item.key] }}'"
          success_msg: "{{ item.key }} state unchanged"
          quiet: yes
        loop: "{{ startvirtstats|dict2items }}"
        loop_control:
          label: "{{ item.key }}"

      - name: Check Pools
        assert:
          that:
            - item.value == endpoolstats[item.key]
          fail_msg: "Pool '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endpoolstats[item.key] }}'"
          success_msg: "{{ item.key }} state unchanged"
          quiet: yes
        loop: "{{ startpoolstats|dict2items }}"
        loop_control:
          label: "{{ item.key }}"

      - name: Check Self-IPs
        assert:
          that:
            - item.value == endselfstats[item.key]
          fail_msg: "Self IP '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endselfstats[item.key] }}'"
          success_msg: "{{ item.key }} state unchanged"
          quiet: yes
        loop: "{{ startselfstats|dict2items }}"
        loop_control:
          label: "{{ item.key }}"

      - name: Check VLANs
        assert:
          that:
            - item.value == endvlanstats[item.key]
          fail_msg: "VLAN '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endselfstats[item.key] }}'"
          success_msg: "{{ item.key }} state unchanged"
          quiet: yes
        loop: "{{ startvlanstats|dict2items }}"
        loop_control:
          label: "{{ item.key }}"

      - name: Register device-groups with pending changes
        shell: tmsh show cm sync-status | grep 'to group' | awk '{print $8}'
        register: device_group

      - name: Synchronize pending changes
        command: tmsh run cm config-sync to-group "{{ item }}"
        loop: "{{ device_group.stdout_lines }}"
        loop_control:
          pause: 10
      
      - name: Wait for final sync
        wait_for:
          timeout: 20
        delegate_to: localhost
            
      when: "'Standby' in failover_state.stdout"


    - name: Failover to resume original HA state
      command: tmsh run sys failover standby
      when: "'Active' in failover_state.stdout"
    
    - name: Backup new version configuration
      bigip_ucs_fetch:
        async_timeout: 600
        src: "{{ inventory_hostname + '-' + date.stdout +  'post-upgrade-backup.ucs' }}"
        dest: "{{ '/backups/' + inventory_hostname + '-' + date.stdout +  'post-upgrade-backup.ucs' }}"
        provider: "{{ provider }}"
      delegate_to: localhost
...